package main

import (
	"os"
	"io/ioutil"
	"go/ast"
	"go/token"
	"log"
	"go/parser"
	"strings"
	"html/template"
	"bytes"
	"golang.org/x/tools/imports"
)

func main()  {
	gofile := os.Getenv("GOFILE")
	fset := token.NewFileSet()
	src,err := ioutil.ReadFile(gofile)
	if err != nil {
		log.Fatal(err)
	}
	f,err := parser.ParseFile(fset,gofile,src, 0)
	if err != nil {
		log.Fatal(err)
	}

	data := struct {
		Package string
		View	string
		EventListeners     []string
		CommandListeners   []string
	}{
		Package: os.Getenv("GOPACKAGE"),
	}

	ast.Inspect(f, func(n ast.Node) bool {
		typ,ok := n.(*ast.TypeSpec)
		if ok {
			if strings.HasSuffix(typ.Name.Name,"View"){
				data.View = typ.Name.Name
			}
		}
		fn,ok := n.(*ast.FuncDecl)
		if ok {
			if strings.HasPrefix(fn.Name.Name,"On") && strings.HasSuffix(fn.Name.Name,"Event"){
				data.EventListeners = append(data.EventListeners,fn.Name.Name[len("On"):len(fn.Name.Name)-len("Event")])
			}
			if strings.HasPrefix(fn.Name.Name,"On") && strings.HasSuffix(fn.Name.Name,"Command"){
				data.CommandListeners = append(data.CommandListeners,fn.Name.Name[len("On"):len(fn.Name.Name)-len("Command")])
			}
		}
		return true
	})

	tmpl := template.New("")
	tmpl.Parse(`// Code generated by cqrs-listener. DO NOT EDIT.
package {{.Package}}

const {{.View}}Type cqrs.ViewType = "{{.View}}"

func init(){
{{range .EventListeners}}
	cqrs.RegisterEventListener(func(event cqrs.Event) {
		cqrs.View({{$.View}}Type).(*{{$.View}}).On{{.}}Event(event.Impl.(*{{.}}Event))
	}, {{.}}EventType)
{{end}}
{{range .CommandListeners}}
	cqrs.RegisterCommandListener(func(command cqrs.Command) {
		cqrs.View({{$.View}}Type).(*{{$.View}}).On{{.}}Command(command.Impl.(*{{.}}Command))
	}, {{.}}CommandType)
{{end}}
}
`)
	buffer := &bytes.Buffer{}
	tmpl.Execute(buffer,&data)
	output := "gen_"+gofile
	buf,err := imports.Process(output,buffer.Bytes(),nil)
	if err != nil {
		log.Fatal(err)
	}
	ioutil.WriteFile(output,buf,0644)
}
