{{define "boilerplate"}}
    // CODE GENERATED, DO NOT MODIFY
    {{template "header" .}}
    const (
    {{.Aggregate}}Type cqrs.AggregateType = "{{.Package}}.{{.Aggregate}}"
    {{range .Commands}}
        {{.}}Type cqrs.MessageType = "{{$.Package}}.{{.}}"
    {{end}}
    {{range .Events}}
        {{.}}Type cqrs.MessageType = "{{$.Package}}.{{.}}"
    {{end}}
    )

    func (a *{{.Aggregate}}) Register(app *cqrs.App){
        app.RegisterAggregate({{.Aggregate}}Type, func() cqrs.AggregateRoot {
            return &{{.Aggregate}}{AggregateMeta: &cqrs.AggregateMeta{}}
        })

        {{range .Events}}
            app.RegisterMessage(func() cqrs.Message {
                return &{{.}}{
                    MessageMeta: &cqrs.MessageMeta{
                        AggregateMeta: &cqrs.AggregateMeta{
                            AggregateType: {{$.Aggregate}}Type,
                        },
                        MessageType: {{.}}Type,
                    },
                }
            })
        {{end}}
        {{range .Commands}}
            app.RegisterMessage(func() cqrs.Message {
                return &{{.}}{
                    MessageMeta: &cqrs.MessageMeta{
                        AggregateMeta: &cqrs.AggregateMeta{
                            AggregateType: {{$.Aggregate}}Type,
                        },
                        MessageType: {{.}}Type,
                    },
                }
            })
        {{end}}
    }

    func (a *{{.Aggregate}}) Meta() *cqrs.AggregateMeta {
        return a.AggregateMeta
    }

    func (a *{{.Aggregate}}) Handle(ctx context.Context, msg cqrs.Message) (err error) {
        var event cqrs.Message
        switch msg.Meta().MessageType {
            {{range .Commands}}
                case {{.}}Type:
                    event,err = a.Handle{{.}}(ctx,*msg.(*{{.}}))
            {{end}}
                default:
                    return a.Apply(ctx,msg)
        }
        if err != nil {
            return err
        }
        meta := event.Meta()
        newMeta := cqrs.FromContext(ctx).NewMessageWithCause(meta.MessageType,msg.Meta().AggregateID, msg.Meta()).Meta()
        newMeta.Data = msg.Meta().Data
        *meta = *newMeta
        return a.Apply(ctx,event)
    }

    func (a *{{.Aggregate}}) Apply(ctx context.Context, msg cqrs.Message) (err error) {
        switch msg.Meta().MessageType {
            {{range .Events}}
                case {{.}}Type:
                    err = a.Apply{{.}}(ctx,*msg.(*{{.}}))
            {{end}}
                default:
                return fmt.Errorf("unknown message type")
        }

        if err != nil {
            return err
        }

        if msg.Meta().Replay {
            return nil
        }
        return cqrs.FromContext(ctx).DispatchMessage(ctx, msg)
    }

    {{range .Commands}}

        func New{{.}}Message(ctx context.Context, data {{.}}, aggregateId ...string) *{{.}} {
            data.MessageMeta = cqrs.FromContext(ctx).NewMessage({{.}}Type,aggregateId...).Meta()
            return &data
        }

        func New{{.}}MessageWithCause(ctx context.Context, data {{.}}, aggregateId string, causedByMeta *cqrs.MessageMeta) *{{.}} {
            data.MessageMeta = cqrs.FromContext(ctx).NewMessageWithCause({{.}}Type,aggregateId,causedByMeta).Meta()
            return &data
        }

        func (e *{{.}}) Meta() *cqrs.MessageMeta {
            return e.MessageMeta
        }
    {{end}}
    {{range .Events}}

        func New{{.}}Message(ctx context.Context,data {{.}}, aggregateId ...string) *{{.}} {
            data.MessageMeta = cqrs.FromContext(ctx).NewMessage({{.}}Type,aggregateId...).Meta()
            return &data
        }

        func New{{.}}MessageWithCause(ctx context.Context, data {{.}}, aggregateId string, causedByMeta *cqrs.MessageMeta) *{{.}} {
            data.MessageMeta = cqrs.FromContext(ctx).NewMessageWithCause({{.}}Type,aggregateId,causedByMeta).Meta()
            return &data
        }

        func (e *{{.}}) Meta() *cqrs.MessageMeta {
            return e.MessageMeta
        }
    {{end}}
{{end}}