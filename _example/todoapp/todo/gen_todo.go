// Code generated by cqrs-aggregate. DO NOT EDIT.
package todo

import (
	"fmt"

	"github.com/netbrain/splitscreen/cqrs"
)

const (
	TodoAggregateType cqrs.AggregateType = "TodoAggregate"

	CreateTodoCommandType cqrs.CommandType = "CreateTodoCommand"

	ArchiveTodoCommandType cqrs.CommandType = "ArchiveTodoCommand"

	DeleteTodoCommandType cqrs.CommandType = "DeleteTodoCommand"

	TodoItemCreatedEventType cqrs.EventType = "TodoItemCreatedEvent"

	TodoItemArchivedEventType cqrs.EventType = "TodoItemArchivedEvent"

	TodoItemDeletedEventType cqrs.EventType = "TodoItemDeletedEvent"
)

func init() {
	cqrs.RegisterAggregate(TodoAggregateType, TodoAggregate{}.Aggr)
}

func (a TodoAggregate) Aggr() *cqrs.Aggregate {
	aggr := &cqrs.Aggregate{
		Impl: &a,
		AggregateID: &cqrs.AggregateID{
			Type: TodoAggregateType,
		},
	}
	a.Aggregate = aggr
	return aggr
}

func (a *TodoAggregate) Apply(e *cqrs.Event) error {
	/*if !a.ReplayMode() && !a.Pending(e){
		return a.Aggregate.Apply(e)
	}*/
	switch e.Type {

	case TodoItemCreatedEventType:
		if err := a.ApplyTodoItemCreatedEvent(e.Impl.(*TodoItemCreatedEvent)); err != nil {
			return err
		}

	case TodoItemArchivedEventType:
		if err := a.ApplyTodoItemArchivedEvent(e.Impl.(*TodoItemArchivedEvent)); err != nil {
			return err
		}

	case TodoItemDeletedEventType:
		if err := a.ApplyTodoItemDeletedEvent(e.Impl.(*TodoItemDeletedEvent)); err != nil {
			return err
		}

	default:
		panic("unknown event type: " + e.Type)
	}
	return nil
}

func (a *TodoAggregate) Handle(c *cqrs.Command) error {
	switch c.Type {

	case CreateTodoCommandType:
		return a.HandleCreateTodoCommand(c.Impl.(*CreateTodoCommand))

	case ArchiveTodoCommandType:
		return a.HandleArchiveTodoCommand(c.Impl.(*ArchiveTodoCommand))

	case DeleteTodoCommandType:
		return a.HandleDeleteTodoCommand(c.Impl.(*DeleteTodoCommand))

	default:
		panic("unknown command type: " + c.Type)
	}
}

func (c CreateTodoCommand) Dispatch(id string, version int) error {
	if c.Command != nil {
		return fmt.Errorf("this command has already been dispatched with id: %s", c.Command.ID)
	}
	cid := cqrs.IDFunc()
	cmd := &cqrs.Command{
		ID:            cid,
		CausationID:   cid,
		CorrelationID: cid,
		Type:          CreateTodoCommandType,
		Aggregate: cqrs.AggregateID{
			ID:      id,
			Version: version,
			Type:    TodoAggregateType,
		},
		Impl: &c,
	}
	c.Command = cmd
	return cqrs.DispatchCommand(cmd)
}

func (c ArchiveTodoCommand) Dispatch(id string, version int) error {
	if c.Command != nil {
		return fmt.Errorf("this command has already been dispatched with id: %s", c.Command.ID)
	}
	cid := cqrs.IDFunc()
	cmd := &cqrs.Command{
		ID:            cid,
		CausationID:   cid,
		CorrelationID: cid,
		Type:          ArchiveTodoCommandType,
		Aggregate: cqrs.AggregateID{
			ID:      id,
			Version: version,
			Type:    TodoAggregateType,
		},
		Impl: &c,
	}
	c.Command = cmd
	return cqrs.DispatchCommand(cmd)
}

func (c DeleteTodoCommand) Dispatch(id string, version int) error {
	if c.Command != nil {
		return fmt.Errorf("this command has already been dispatched with id: %s", c.Command.ID)
	}
	cid := cqrs.IDFunc()
	cmd := &cqrs.Command{
		ID:            cid,
		CausationID:   cid,
		CorrelationID: cid,
		Type:          DeleteTodoCommandType,
		Aggregate: cqrs.AggregateID{
			ID:      id,
			Version: version,
			Type:    TodoAggregateType,
		},
		Impl: &c,
	}
	c.Command = cmd
	return cqrs.DispatchCommand(cmd)
}

func (e TodoItemCreatedEvent) Apply(aggregate *cqrs.Aggregate, causedBy *cqrs.Command) error {
	event := &cqrs.Event{
		ID:            cqrs.IDFunc(),
		CausationID:   causedBy.ID,
		CorrelationID: causedBy.CorrelationID,
		Type:          TodoItemCreatedEventType,
		Aggregate:     causedBy.Aggregate,
		Impl:          &e,
	}
	e.Event = event
	return aggregate.Apply(event)
}

func (e TodoItemArchivedEvent) Apply(aggregate *cqrs.Aggregate, causedBy *cqrs.Command) error {
	event := &cqrs.Event{
		ID:            cqrs.IDFunc(),
		CausationID:   causedBy.ID,
		CorrelationID: causedBy.CorrelationID,
		Type:          TodoItemArchivedEventType,
		Aggregate:     causedBy.Aggregate,
		Impl:          &e,
	}
	e.Event = event
	return aggregate.Apply(event)
}

func (e TodoItemDeletedEvent) Apply(aggregate *cqrs.Aggregate, causedBy *cqrs.Command) error {
	event := &cqrs.Event{
		ID:            cqrs.IDFunc(),
		CausationID:   causedBy.ID,
		CorrelationID: causedBy.CorrelationID,
		Type:          TodoItemDeletedEventType,
		Aggregate:     causedBy.Aggregate,
		Impl:          &e,
	}
	e.Event = event
	return aggregate.Apply(event)
}
